name: publish_python_windows

on:
  # Permit calling the workflow from outside (https://github.com/actions/runner/discussions/1884)
  workflow_call:
    inputs:
      dry_publish:
        description: 'Dry publish (no upload)'
        type: boolean
        required: false
        default: true
  # Permit manual trigger
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Manual'
        required: false
        default: ''
      dry_publish:
        description: 'Dry publish (no upload)'
        type: boolean
        required: false
        default: false

env:
  BUILD_TYPE : Release
  BUILD_DIR : build
  CMAKE_GENERATOR : "Visual Studio 17 2022"
  DOXYGEN_ROOT : ${{github.workspace}}\doxygen
  DOXYGEN_VERSION : "1.9.8"

jobs:
  build:
    runs-on: windows-2022
    strategy:
      matrix:
        # Python version
        python: [
          # Double quote for version is needed otherwise 3.10 => 3.1
            {py: "3.9"},
            {py: "3.10"},
            {py: "3.11"},
            {py: "3.12"},
            {py: "3.13.3"}
          ]

    steps:
    - uses: actions/checkout@v4

    - name: Setup pixi
      uses: prefix-dev/setup-pixi@v0.8.1
      with:
        run-install: false

    - name: Install dependencies
      run: |
        pixi init
        pixi add python==${{matrix.python.py}}
        pixi add pip numpy build
        pixi add libboost-devel eigen ninja

    - name: Install Doxygen under windows
      uses: fabien-ors/install-doxygen-windows-action@v1
      with:
        doxygen-root: ${{env.DOXYGEN_ROOT}}
        doxygen-version: ${{env.DOXYGEN_VERSION}}

    - name: Build & install nlopt static libraries
      uses: ./.github/actions/nlopt_static_windows

    - name: Build & install HDF5 static libraries
      uses: ./.github/actions/hdf5_static_windows
      env:
        CMAKE_GENERATOR_PLATFORM: ${{ matrix.arch.of }}

    - name : Configure build directory
      run : |
        pixi run cmake `
          -B${{ env.BUILD_DIR }} `
          -DBUILD_PYTHON=ON `
          -DBUILD_R=OFF `
          -DPython3_ROOT_DIR="${{env.pythonLocation}}" `
          -DHDF5_USE_STATIC_LIBRARIES=ON `
          -DBUILD_DOC=ON

    - name : Build the package
      run : |
        cmake --build ${{env.BUILD_DIR}} --target python_build --config ${{env.BUILD_TYPE}}

    - name : Create Wheel
      run : |
        cd ${{env.BUILD_DIR}}\python\${{env.BUILD_TYPE}}
        # Note: wheel must be declared not pure (see setup.py)
        python -m build --wheel -C="--build-option=--plat-name=win_amd64"
        cd ..\..\..
        $PKG_PATH = Get-ChildItem -Path "${{env.BUILD_DIR}}/python/${{env.BUILD_TYPE}}/dist/*" -File
        echo "MY_PKG=$PKG_PATH" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

    - uses: actions/upload-artifact@v4
      # Use specific artifact identifier for publishing all versions
      with:
        name: windows-python-package-x64-${{matrix.python.py}}
        path: ${{env.MY_PKG}}

  test:
    needs: build
    runs-on: windows-2022
    strategy:
      matrix:
        python: [
        # Double quote for version is needed otherwise 3.10 => 3.1
            {py: "3.9"},
            {py: "3.10"},
            {py: "3.11"},
            {py: "3.12"},
            {py: "3.13.3"}
          ]

    steps:
    - uses: actions/checkout@v4

    - uses: actions/download-artifact@v4
      with:
        name: windows-python-package-x64-${{matrix.python.py}}

    - name: Setup uv
      uses: astral-sh/setup-uv@v6
      with:
        python-version: ${{ matrix.python.py }}
        activate-environment: true

    - name: Install Python package
      run: |
        uv pip install "$(ls *.whl)[conv]"

    - name: Test installed Python package
      run: |
        python -c 'import gstlearn as gl; gl.acknowledge_gstlearn()'
        python tests/py/test_Arguments.py
        python tests/py/test_Assessors.py
        python tests/py/test_Matrix.py
        python tests/py/test_h5.py

  publish:
    needs: test
    if: ${{inputs.dry_publish == false}}

    # Only ubuntu can upload via ssh
    runs-on: ubuntu-latest

    steps:
    # Upload packages to pypi
    - uses: fabien-ors/pypi-publish-action@v2
      with:
        repo: pypi
        username: __token__
        password: ${{secrets.TWINE_PYPI_PWD}}
        pattern: windows-python-package-*

    # Delete the artifacts (for freeing storage space under github)
    - uses: geekyeggo/delete-artifact@v5
      with:
        name: windows-python-package-*

