name: publish_r_linux

on:
  # Permit calling the workflow from outside (https://github.com/actions/runner/discussions/1884)
  workflow_call:
    inputs:
      dry_publish:
        description: 'Dry publish (no upload)'
        type: boolean
        required: false
        default: true
  # Permit manual trigger
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Manual'
        required: false
        default: ''
      dry_publish:
        description: 'Dry publish (no upload)'
        type: boolean
        required: false
        default: false

env:
  CMAKE_BUILD_TYPE : Release
  BUILD_DIR : build

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      # https://docs.github.com/en/actions/using-jobs/defining-outputs-for-jobs
      cran_path: ${{ steps.define_cran_path.outputs.CRAN_PATH }}
    container:
      image: quay.io/pypa/manylinux_2_28_x86_64

    steps:
    - uses: actions/checkout@v4

    # Fix dubious ownership issue:
    # https://github.com/actions/checkout/issues/1048
    - name: Fix dubious ownership
      run: |
        git config --global --add safe.directory $GITHUB_WORKSPACE

    - name: Install dependencies
      run: |
        dnf update -y
        dnf install -y \
          sudo \
          doxygen \
          wget gettext \
          libffi-devel sqlite-devel openssl-devel \
          bzip2-devel xz-devel \
          fontconfig-devel libxml2-devel \
          harfbuzz-devel fribidi-devel freetype-devel libpng-devel \
          libjpeg-turbo-devel libtiff-devel libcurl-devel \
          cairo-devel libXt-devel pcre2-devel \
          eigen3-devel

    - name: Install boost
      uses: MarkusJx/install-boost@v2
      id: install-boost
      with:
        # A list of supported versions can be found here:
        # https://github.com/MarkusJx/prebuilt-boost/blob/main/versions-manifest.json
        boost_version: 1.83.0

    - name: Install R
      run: |
        wget https://cran.r-project.org/src/base/R-4/R-4.5.1.tar.gz
        tar -xvf R-4.5.1.tar.gz
        cd R-4.5.1
        ./configure --with-readline=no --without-x --with-cairo --with-pcre1 --enable-R-shlib
        make
        sudo make install
        Rscript -e "install.packages (c('knitr', 'rmarkdown', 'roxygen2'), repos='https://cloud.r-project.org/', dependencies = TRUE)"
        cd .. && rm -rf R-4.5.1*

    # Do not use r-lib/actions/setup-r-dependencies
    - name: Install R dependencies
      run: Rscript -e "install.packages (c('ggplot2', 'ggpubr', 'ggnewscale'),
                                         repos='https://cran.rstudio.com/')"

    - name: Build & install NLopt static libraries
      uses: ./.github/actions/nlopt_static_unix

    - name: Build & install HDF5 static libraries
      uses: ./.github/actions/hdf5_static_unix

    - name: Install recent Bison
      run: |
        wget http://ftp.gnu.org/gnu/bison/bison-3.8.2.tar.gz
        tar -xvzf bison-3.8.2.tar.gz
        cd bison-3.8.2
        ./configure --prefix=/usr/local
        make -j$(nproc)
        make install
        cd .. && rm -rf bison-3.8.2*

    - name: Install custom SWIG
      run: |
        # manylinux already contains a more recent swig installed via pipx
        pipx uninstall swig
        git clone https://github.com/fabien-ors/swig swig-ors
        cd swig-ors
        cmake -Bbuild
        cd build
        make
        make install
        cd ../.. && rm -rf swig-ors

    - name : Configure build directory
      run : |
        cmake \
          -B${{ env.BUILD_DIR }} \
          -DBUILD_PYTHON=OFF \
          -DBUILD_R=ON \
          -DHDF5_USE_STATIC_LIBRARIES=ON \
          -DBUILD_DOC=ON \
      env:
        BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}

    - name : Build the package and save generated file name in the environment
      run : |
        cmake --build ${{env.BUILD_DIR}} --parallel 3 --target r_install
        echo "MY_PKG=$(ls ${{env.BUILD_DIR}}/r/${{env.CMAKE_BUILD_TYPE}}/gstlearn_*.tar.gz)" >> "$GITHUB_ENV"

    - name: Define the CRAN path on our server
      id: define_cran_path
      run: |
        PROJECT_VERSION=$(cmake --build ${{env.BUILD_DIR}} --target print_version | grep PROJECT_VERSION | cut -d "=" -f2 | xargs)
        PROJECT_FULL_VERSION=$(cmake --build ${{env.BUILD_DIR}} --target print_version | grep PROJECT_FULL_VERSION | cut -d "=" -f2 | xargs)
        if [ "${PROJECT_VERSION}" == "${PROJECT_FULL_VERSION}" ]; then
          CRAN_PATH=/var/www/html/cran
        else
          CRAN_PATH=/var/www/html/cran/prerelease
        fi
        echo "CRAN_PATH=${CRAN_PATH}" >> "$GITHUB_OUTPUT"

    - name : Always show r_doc log
      if: success() || failure()
      run: |
        cat ${{env.BUILD_DIR}}/r/${{env.CMAKE_BUILD_TYPE}}/create_doc.out

    - uses: actions/upload-artifact@v4
      with:
        name: linux-r-package
        path: ${{env.MY_PKG}}

  test:
    needs: build
    runs-on: ubuntu-latest
    container:
      # This container is generated by
      # https://github.com/fabien-ors/docker-generate/actions/workflows/create_almalinux-8_swigex0.yml
      image: fabienors/almalinux-8-swigex0-r

    steps:
    - uses: actions/checkout@v4

    - uses: actions/download-artifact@v4
      with:
        name: linux-r-package

    # Do not use r-lib/actions/setup-r-dependencies
    - name: Install R dependencies
      run: Rscript -e "install.packages (c('ggplot2', 'ggpubr', 'ggnewscale'),
                                         repos='https://cran.rstudio.com/')"
            
    - name: Install R package
      run: Rscript -e "install.packages(\"$(ls *.tar.gz)\", repos=NULL, type='source')"

    - name: Test installed R package
      run: |
        Rscript -e "library('gstlearn'); acknowledge_gstlearn()"
        Rscript tests/r/test_Arguments.R
        Rscript tests/r/test_Assessors.R
        Rscript tests/r/test_Matrix.R
        Rscript tests/r/test_dumpToNF.R

  publish:
    needs: test
    if: ${{inputs.dry_publish == false}}
    
    # Only ubuntu can upload to CRAN easily (ssh)
    runs-on: ubuntu-latest
    
    steps:
      - env:
          CRAN_PATH: ${{needs.build.outputs.cran_path}}

        # Publish packages to our CRAN
        uses: fabien-ors/cran-publish-action@v4
        with:
          host: ${{secrets.CG_HOST}}
          username: ${{secrets.CG_USR}}
          password: ${{secrets.CG_PWD}}
          repo-path: ${{env.CRAN_PATH}}

      # Delete the artifacts (for freeing storage space under github)
      - uses: geekyeggo/delete-artifact@v5
        with:
          name: linux-r-package
