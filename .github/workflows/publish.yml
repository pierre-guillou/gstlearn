name: publish

on:
  # Activate the workflow every 15 days at 23:30 UTC = for Paris 00:30 (summer) or 01:30 (winter)
  schedule:
    # * is a special character in YAML so you have to quote the string
    - cron: '30 23 */15 * *'
  # Permit manual trigger
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Manual'
        required: false
        default: ''
      dry_publish:
        description: 'Dry publish (no upload)'
        type: boolean
        required: false
        default: false

env:
  BUILD_DIR : build

jobs:
  define_cran_path:
    runs-on: ubuntu-latest
    outputs:
      # https://docs.github.com/en/actions/using-jobs/defining-outputs-for-jobs
      cran_path: ${{ steps.main_step.outputs.CRAN_PATH }}

    steps:
    - uses: actions/checkout@v4

    # TODO : This shoudn't be needed for PRINT_VERSION target
    - name: Install dependencies
      run: |
        sudo rm /etc/apt/sources.list.d/microsoft-prod.list
        sudo apt-get update
        sudo apt-get install -yq \
          libopenmpi-dev \
          libboost-dev \
          libeigen3-dev \
          libhdf5-dev \
          libnlopt-dev

    - name: Define CRAN path on our server
      id: main_step
      run: |
        cmake -B${{env.BUILD_DIR}} -DBUILD_PYTHON=OFF -DBUILD_R=OFF
        PROJECT_VERSION=$(cmake --build ${{env.BUILD_DIR}} --target print_version | grep PROJECT_VERSION | cut -d "=" -f2 | xargs)
        PROJECT_FULL_VERSION=$(cmake --build ${{env.BUILD_DIR}} --target print_version | grep PROJECT_FULL_VERSION | cut -d "=" -f2 | xargs)
        if [ "${PROJECT_VERSION}" == "${PROJECT_FULL_VERSION}" ]; then
          CRAN_PATH=/var/www/html/cran
        else
          CRAN_PATH=/var/www/html/cran/prerelease
        fi
        echo "CRAN_PATH=${CRAN_PATH}" >> "$GITHUB_OUTPUT"

  call-python-macos:
    uses: ./.github/workflows/publish_python_macos.yml
    secrets: inherit
  call-python-windows:
    uses: ./.github/workflows/publish_python_windows.yml
    secrets: inherit
  call-python-linux:
    uses: ./.github/workflows/publish_python_manylinux.yml
    secrets: inherit
  call-r-macos:
    uses: ./.github/workflows/publish_r_macos.yml
    secrets: inherit
  call-r-windows:
    uses: ./.github/workflows/publish_r_windows.yml
    secrets: inherit
  call-r-linux:
    uses: ./.github/workflows/publish_r_linux.yml
    secrets: inherit

  call-python-publish:
    needs: [define_cran_path, call-python-macos, call-python-windows, call-python-linux, call-r-macos, call-r-windows, call-r-linux]
    if: ${{ (inputs.dry_publish == false) && (github.event_name != 'schedule') }}

    runs-on: ubuntu-latest
    
    steps:
      - uses: fabien-ors/pypi-publish-action@v2
        with:
          repo: pypi
          username: __token__
          password: ${{secrets.TWINE_PYPI_PWD}}
          pattern: "*python-package-*"
  
      # Delete the artifacts (for freeing storage space under github)
      - uses: geekyeggo/delete-artifact@v5
        with:
          name: "*python-package*"

  call-r-publish:
    needs: [define_cran_path, call-python-macos, call-python-windows, call-python-linux, call-r-macos, call-r-windows, call-r-linux]
    if: ${{ (inputs.dry_publish == false) && (github.event_name != 'schedule') }}
    
    # Only ubuntu can upload to CRAN easily (ssh)
    runs-on: ubuntu-latest
    
    steps:
      - env:
          CRAN_PATH: ${{needs.define_cran_path.outputs.cran_path}}

        uses: fabien-ors/cran-publish-action@v4
        with:
          host: ${{secrets.CG_HOST}}
          username: ${{secrets.CG_USR}}
          password: ${{secrets.CG_PWD}}
          repo-path: ${{env.CRAN_PATH}}
          pattern: "*r-package*"

      # Delete the artifacts (for freeing storage space under github)
      - uses: geekyeggo/delete-artifact@v5
        with:
          name: "*r-package*"